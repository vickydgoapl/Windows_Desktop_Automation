# callback_plugins/csv_timings.py
from __future__ import annotations
from ansible.plugins.callback import CallbackBase
import csv, os, pathlib, datetime, smtplib, ssl
from email.message import EmailMessage

class CallbackModule(CallbackBase):
    """
    Aggregate callback: write per-task timings to CSV & e-mail via Gmail.
    Enable with  callback_whitelist = csv_timings
    """
    CALLBACK_VERSION = 2.0
    CALLBACK_TYPE    = "aggregate"
    CALLBACK_NAME    = "csv_timings"
    CALLBACK_NEEDS_WHITELIST = True

    def __init__(self):
        super().__init__()
        self._tasks: dict[str, dict[str, str]] = {}
        arti_dir = pathlib.Path(os.getenv("RUNNER_ARTIFACT_DIR", "/tmp"))
        self._outfile = arti_dir / "task_times.csv"

    # ---------- helpers ----------
    @staticmethod
    def _utc_iso() -> str:
        return datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")

    # ---------- per-task hooks ----------
    def v2_runner_on_start(self, host, task, **kw):          # noqa: N802
        self._display.display(f"Runner start log")
        self._tasks[task.get_name()] = {"start": self._utc_iso()}

    def _mark_end(self, result):                             # common exit path
        self._display.display(f"runner end log")
        self._tasks[result.task_name]["end"] = self._utc_iso()

    v2_runner_on_ok      = _mark_end          # noqa: N802
    v2_runner_on_failed  = _mark_end          # noqa: N802
    v2_runner_on_skipped = _mark_end          # noqa: N802

    # ---------- play done → write CSV → send mail ----------
    def v2_playbook_on_stats(self, stats):                   # noqa: N802
        self._display.display(f"csv callback start")
        self._write_csv()
        self._send_csv_email()

    def _write_csv(self):
        self._outfile.parent.mkdir(parents=True, exist_ok=True)
        with self._outfile.open("w", newline="") as fh:
            writer = csv.DictWriter(fh, fieldnames=["task", "start", "end"])
            writer.writeheader()
            for task, t in self._tasks.items():
                writer.writerow({"task": task,
                                 "start": t.get("start", ""),
                                 "end":   t.get("end",   "")})
        self._display.display(f"CSV timing written to {self._outfile}")

    def _send_csv_email(self):
        user = os.getenv("GMAIL_USER")
        pwd  = os.getenv("GMAIL_PASS")
        to   = os.getenv("GMAIL_TO", user)

        if not (user and pwd):
            self._display.warning("GMAIL_USER / GMAIL_PASS unset – skipping email")
            return

        msg = EmailMessage()
        msg["Subject"] = f"Ansible task timings – {self._utc_iso()}"
        msg["From"]    = user
        msg["To"]      = to
        msg.set_content(
            "Hi,\n\nAttached is the per-task runtime CSV generated by Ansible."
        )
        with self._outfile.open("rb") as fh:
            msg.add_attachment(
                fh.read(), maintype="text", subtype="csv",
                filename=self._outfile.name
            )

        context = ssl.create_default_context()
        with smtplib.SMTP("smtp.gmail.com", 587) as smtp:        # TLS port 587
            smtp.starttls(context=context)
            smtp.login(user, pwd)                                # App-password auth
            smtp.send_message(msg)

        self._display.display(f"E-mail with CSV sent to {to} via Gmail SMTP")